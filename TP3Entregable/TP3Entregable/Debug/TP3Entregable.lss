
TP3Entregable.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000032  00800100  000006ba  0000074e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000006ba  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800132  00800132  00000780  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000780  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000007b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000198  00000000  00000000  000007f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001591  00000000  00000000  00000988  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c2d  00000000  00000000  00001f19  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000c73  00000000  00000000  00002b46  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003d8  00000000  00000000  000037bc  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006e1  00000000  00000000  00003b94  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000009c1  00000000  00000000  00004275  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000138  00000000  00000000  00004c36  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 3b 03 	jmp	0x676	; 0x676 <__vector_14>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__vector_18>
  4c:	0c 94 3e 01 	jmp	0x27c	; 0x27c <__vector_19>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ea eb       	ldi	r30, 0xBA	; 186
  7c:	f6 e0       	ldi	r31, 0x06	; 6
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 33       	cpi	r26, 0x32	; 50
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e3       	ldi	r26, 0x32	; 50
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	aa 33       	cpi	r26, 0x3A	; 58
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 da 00 	call	0x1b4	; 0x1b4 <main>
  9e:	0c 94 5b 03 	jmp	0x6b6	; 0x6b6 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <DHT11_init>:
—-------------PUC—-----|--------------DHT11…………………….|
*/
#include "DHT11.h"

void DHT11_init(void){
	DDRC |= (1<<PINC0); // PIN COMO SALIDA
  a6:	87 b1       	in	r24, 0x07	; 7
  a8:	81 60       	ori	r24, 0x01	; 1
  aa:	87 b9       	out	0x07, r24	; 7
	PORTC &= ~(1<<PINC0);  // Pongo en 0
  ac:	88 b1       	in	r24, 0x08	; 8
  ae:	8e 7f       	andi	r24, 0xFE	; 254
  b0:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  b2:	2f ef       	ldi	r18, 0xFF	; 255
  b4:	89 ef       	ldi	r24, 0xF9	; 249
  b6:	90 e0       	ldi	r25, 0x00	; 0
  b8:	21 50       	subi	r18, 0x01	; 1
  ba:	80 40       	sbci	r24, 0x00	; 0
  bc:	90 40       	sbci	r25, 0x00	; 0
  be:	e1 f7       	brne	.-8      	; 0xb8 <DHT11_init+0x12>
  c0:	00 c0       	rjmp	.+0      	; 0xc2 <DHT11_init+0x1c>
  c2:	00 00       	nop
	_delay_ms(20); // mantengo la señal en bajo
	PORTC |= (1<<PORTC0); // pongo la señal en 1
  c4:	88 b1       	in	r24, 0x08	; 8
  c6:	81 60       	ori	r24, 0x01	; 1
  c8:	88 b9       	out	0x08, r24	; 8
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ca:	25 ed       	ldi	r18, 0xD5	; 213
  cc:	2a 95       	dec	r18
  ce:	f1 f7       	brne	.-4      	; 0xcc <DHT11_init+0x26>
  d0:	00 00       	nop
	_delay_us(40); // Espero a que responda el sensor
	DDRC &= ~(1<<PINC0); // Pin como entrada
  d2:	87 b1       	in	r24, 0x07	; 7
  d4:	8e 7f       	andi	r24, 0xFE	; 254
  d6:	87 b9       	out	0x07, r24	; 7
  d8:	08 95       	ret

000000da <DHT11_checkResponse>:
  da:	85 ed       	ldi	r24, 0xD5	; 213
  dc:	8a 95       	dec	r24
  de:	f1 f7       	brne	.-4      	; 0xdc <DHT11_checkResponse+0x2>
  e0:	00 00       	nop
}

// Verificar la respuesta del sensor tras el inicio.
uint8_t DHT11_checkResponse(void) {
	_delay_us(40);
	if (!(PINC & (1<<PINC0))) {
  e2:	30 99       	sbic	0x06, 0	; 6
  e4:	13 c0       	rjmp	.+38     	; 0x10c <DHT11_checkResponse+0x32>
  e6:	8f e3       	ldi	r24, 0x3F	; 63
  e8:	91 e0       	ldi	r25, 0x01	; 1
  ea:	01 97       	sbiw	r24, 0x01	; 1
  ec:	f1 f7       	brne	.-4      	; 0xea <DHT11_checkResponse+0x10>
  ee:	00 c0       	rjmp	.+0      	; 0xf0 <DHT11_checkResponse+0x16>
  f0:	00 00       	nop
		_delay_us(80);
		if (PINC & (1<<PINC0)) {
  f2:	96 b1       	in	r25, 0x06	; 6
  f4:	89 2f       	mov	r24, r25
  f6:	81 70       	andi	r24, 0x01	; 1
  f8:	90 ff       	sbrs	r25, 0
  fa:	09 c0       	rjmp	.+18     	; 0x10e <DHT11_checkResponse+0x34>
  fc:	8f e3       	ldi	r24, 0x3F	; 63
  fe:	91 e0       	ldi	r25, 0x01	; 1
 100:	01 97       	sbiw	r24, 0x01	; 1
 102:	f1 f7       	brne	.-4      	; 0x100 <DHT11_checkResponse+0x26>
 104:	00 c0       	rjmp	.+0      	; 0x106 <DHT11_checkResponse+0x2c>
 106:	00 00       	nop
			_delay_us(80);
			return 1;
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	08 95       	ret
		}
	}
	return 0;
 10c:	80 e0       	ldi	r24, 0x00	; 0
}
 10e:	08 95       	ret

00000110 <DHT11_readByte>:

// Leer cada byte de datos del sensor
uint8_t DHT11_readByte(void) {
	uint8_t i, byte = 0;
 110:	80 e0       	ldi	r24, 0x00	; 0
	for (i = 0; i < 8; i++) {
 112:	90 e0       	ldi	r25, 0x00	; 0
 114:	16 c0       	rjmp	.+44     	; 0x142 <DHT11_readByte+0x32>
		while (!(PINC & (1<<PINC0))); // Esperar que PINC0 sea 1
 116:	30 9b       	sbis	0x06, 0	; 6
 118:	fe cf       	rjmp	.-4      	; 0x116 <DHT11_readByte+0x6>
 11a:	20 ea       	ldi	r18, 0xA0	; 160
 11c:	2a 95       	dec	r18
 11e:	f1 f7       	brne	.-4      	; 0x11c <DHT11_readByte+0xc>
		_delay_us(30);
		if (PINC & (1<<PINC0)) {
 120:	30 9b       	sbis	0x06, 0	; 6
 122:	0c c0       	rjmp	.+24     	; 0x13c <DHT11_readByte+0x2c>
			byte |= (1 << (7 - i));
 124:	47 e0       	ldi	r20, 0x07	; 7
 126:	50 e0       	ldi	r21, 0x00	; 0
 128:	49 1b       	sub	r20, r25
 12a:	51 09       	sbc	r21, r1
 12c:	21 e0       	ldi	r18, 0x01	; 1
 12e:	30 e0       	ldi	r19, 0x00	; 0
 130:	02 c0       	rjmp	.+4      	; 0x136 <DHT11_readByte+0x26>
 132:	22 0f       	add	r18, r18
 134:	33 1f       	adc	r19, r19
 136:	4a 95       	dec	r20
 138:	e2 f7       	brpl	.-8      	; 0x132 <DHT11_readByte+0x22>
 13a:	82 2b       	or	r24, r18
		}
		while (PINC & (1<<PINC0)); // Esperar que PINC0 sea 0
 13c:	30 99       	sbic	0x06, 0	; 6
 13e:	fe cf       	rjmp	.-4      	; 0x13c <DHT11_readByte+0x2c>
}

// Leer cada byte de datos del sensor
uint8_t DHT11_readByte(void) {
	uint8_t i, byte = 0;
	for (i = 0; i < 8; i++) {
 140:	9f 5f       	subi	r25, 0xFF	; 255
 142:	98 30       	cpi	r25, 0x08	; 8
 144:	40 f3       	brcs	.-48     	; 0x116 <DHT11_readByte+0x6>
			byte |= (1 << (7 - i));
		}
		while (PINC & (1<<PINC0)); // Esperar que PINC0 sea 0
	}
	return byte;
}
 146:	08 95       	ret

00000148 <DHT11_read>:

void DHT11_read(uint8_t *hE, uint8_t *tE)
{
 148:	cf 92       	push	r12
 14a:	df 92       	push	r13
 14c:	ef 92       	push	r14
 14e:	ff 92       	push	r15
 150:	0f 93       	push	r16
 152:	1f 93       	push	r17
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
 158:	8c 01       	movw	r16, r24
 15a:	eb 01       	movw	r28, r22
	uint8_t humedadE, humedadD, temperaturaE, temperaturaD, sumaCheck;

	DHT11_init();
 15c:	0e 94 53 00 	call	0xa6	; 0xa6 <DHT11_init>

	if (DHT11_checkResponse()) {
 160:	0e 94 6d 00 	call	0xda	; 0xda <DHT11_checkResponse>
 164:	88 23       	and	r24, r24
 166:	e9 f0       	breq	.+58     	; 0x1a2 <DHT11_read+0x5a>
		humedadE = DHT11_readByte();
 168:	0e 94 88 00 	call	0x110	; 0x110 <DHT11_readByte>
 16c:	d8 2e       	mov	r13, r24
		humedadD = DHT11_readByte();
 16e:	0e 94 88 00 	call	0x110	; 0x110 <DHT11_readByte>
 172:	f8 2e       	mov	r15, r24
		temperaturaE = DHT11_readByte();
 174:	0e 94 88 00 	call	0x110	; 0x110 <DHT11_readByte>
 178:	e8 2e       	mov	r14, r24
		temperaturaD = DHT11_readByte();
 17a:	0e 94 88 00 	call	0x110	; 0x110 <DHT11_readByte>
 17e:	c8 2e       	mov	r12, r24
		sumaCheck = DHT11_readByte();
 180:	0e 94 88 00 	call	0x110	; 0x110 <DHT11_readByte>

		if (humedadE + humedadD + temperaturaE + temperaturaD == sumaCheck) {
 184:	2f 2d       	mov	r18, r15
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	2d 0d       	add	r18, r13
 18a:	31 1d       	adc	r19, r1
 18c:	2e 0d       	add	r18, r14
 18e:	31 1d       	adc	r19, r1
 190:	2c 0d       	add	r18, r12
 192:	31 1d       	adc	r19, r1
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	28 17       	cp	r18, r24
 198:	39 07       	cpc	r19, r25
 19a:	19 f4       	brne	.+6      	; 0x1a2 <DHT11_read+0x5a>
			*hE = humedadE;
 19c:	f8 01       	movw	r30, r16
 19e:	d0 82       	st	Z, r13
			*tE = temperaturaE;
 1a0:	e8 82       	st	Y, r14
		}
	}
 1a2:	df 91       	pop	r29
 1a4:	cf 91       	pop	r28
 1a6:	1f 91       	pop	r17
 1a8:	0f 91       	pop	r16
 1aa:	ff 90       	pop	r15
 1ac:	ef 90       	pop	r14
 1ae:	df 90       	pop	r13
 1b0:	cf 90       	pop	r12
 1b2:	08 95       	ret

000001b4 <main>:

int main(void)
{
	
	// Inicialización de UART
	SerialPort_Init(0x67); 		// Inicializo formato 8N1 y 0x67=103 BAUDRATE = 9600bps
 1b4:	87 e6       	ldi	r24, 0x67	; 103
 1b6:	0e 94 20 02 	call	0x440	; 0x440 <SerialPort_Init>
	SerialPort_TX_Enable();    // Activo el transmisor del puerto serie
 1ba:	0e 94 2a 02 	call	0x454	; 0x454 <SerialPort_TX_Enable>
	SerialPort_RX_Enable();    //Activo el receptor del puerto serie
 1be:	0e 94 3c 02 	call	0x478	; 0x478 <SerialPort_RX_Enable>
	SerialPort_RX_Interrupt_Enable();//Activo interrupcion de recepcion
 1c2:	0e 94 42 02 	call	0x484	; 0x484 <SerialPort_RX_Interrupt_Enable>
	sei();
 1c6:	78 94       	sei
	DHT11_init(); // inicializo sensor
 1c8:	0e 94 53 00 	call	0xa6	; 0xa6 <DHT11_init>
	RTC_DS3231_Init();//inicializo rtc
 1cc:	0e 94 c2 01 	call	0x384	; 0x384 <RTC_DS3231_Init>
	
	while (1)
	{
		if (flag) // Si flag es xFF, funciona, si flag es x00, parada.
 1d0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1d4:	88 23       	and	r24, r24
 1d6:	e1 f3       	breq	.-8      	; 0x1d0 <main+0x1c>
		{
			//_delay_ms(2000);
			hayDato=1;
 1d8:	81 e0       	ldi	r24, 0x01	; 1
 1da:	80 93 33 01 	sts	0x0133, r24	; 0x800133 <hayDato>
			ArmarBuffer();
 1de:	0e 94 4e 02 	call	0x49c	; 0x49c <ArmarBuffer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1e2:	2f ef       	ldi	r18, 0xFF	; 255
 1e4:	87 ea       	ldi	r24, 0xA7	; 167
 1e6:	91 e6       	ldi	r25, 0x61	; 97
 1e8:	21 50       	subi	r18, 0x01	; 1
 1ea:	80 40       	sbci	r24, 0x00	; 0
 1ec:	90 40       	sbci	r25, 0x00	; 0
 1ee:	e1 f7       	brne	.-8      	; 0x1e8 <main+0x34>
 1f0:	00 c0       	rjmp	.+0      	; 0x1f2 <main+0x3e>
 1f2:	00 00       	nop
			_delay_ms(2000);
			SerialPort_TX_Interrupt_Enable();//Habilito interrupcion para imprimir buffer
 1f4:	0e 94 30 02 	call	0x460	; 0x460 <SerialPort_TX_Interrupt_Enable>
 1f8:	eb cf       	rjmp	.-42     	; 0x1d0 <main+0x1c>

000001fa <__vector_18>:
		}
	}
}
ISR(USART_RX_vect){//interrupcion para recibir datos de la terminal
 1fa:	1f 92       	push	r1
 1fc:	0f 92       	push	r0
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	0f 92       	push	r0
 202:	11 24       	eor	r1, r1
 204:	2f 93       	push	r18
 206:	3f 93       	push	r19
 208:	4f 93       	push	r20
 20a:	5f 93       	push	r21
 20c:	6f 93       	push	r22
 20e:	7f 93       	push	r23
 210:	8f 93       	push	r24
 212:	9f 93       	push	r25
 214:	af 93       	push	r26
 216:	bf 93       	push	r27
 218:	ef 93       	push	r30
 21a:	ff 93       	push	r31
	SerialPort_TX_Interrupt_Disable();//deshabilito interrupciones
 21c:	0e 94 36 02 	call	0x46c	; 0x46c <SerialPort_TX_Interrupt_Disable>
	RX_BUFFER=SerialPort_Recive_Data();// recibo datos de la terminal para procesar
 220:	0e 94 4b 02 	call	0x496	; 0x496 <SerialPort_Recive_Data>
 224:	80 93 37 01 	sts	0x0137, r24	; 0x800137 <RX_BUFFER>
	int cant = 0;
	if(RX_BUFFER!='\r'){ // guardo el dato que puede ser s o S
 228:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <RX_BUFFER>
 22c:	8d 30       	cpi	r24, 0x0D	; 13
 22e:	29 f0       	breq	.+10     	; 0x23a <__vector_18+0x40>
		comando[cant]=RX_BUFFER;
 230:	80 91 37 01 	lds	r24, 0x0137	; 0x800137 <RX_BUFFER>
 234:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <comando>
 238:	03 c0       	rjmp	.+6      	; 0x240 <__vector_18+0x46>
		cant++;// el usuario no dio enter
	}
	else {
		comando[cant]='\n';
 23a:	8a e0       	ldi	r24, 0x0A	; 10
 23c:	80 93 38 01 	sts	0x0138, r24	; 0x800138 <comando>
	}
	if (comando[0]=='s'|| comando[0]=='S')
 240:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <comando>
 244:	83 37       	cpi	r24, 0x73	; 115
 246:	11 f0       	breq	.+4      	; 0x24c <__vector_18+0x52>
 248:	83 35       	cpi	r24, 0x53	; 83
 24a:	39 f4       	brne	.+14     	; 0x25a <__vector_18+0x60>
	{
		flag=!flag; // alterno valor del flag
 24c:	81 e0       	ldi	r24, 0x01	; 1
 24e:	90 91 00 01 	lds	r25, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 252:	91 11       	cpse	r25, r1
 254:	80 e0       	ldi	r24, 0x00	; 0
 256:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	}
	
}
 25a:	ff 91       	pop	r31
 25c:	ef 91       	pop	r30
 25e:	bf 91       	pop	r27
 260:	af 91       	pop	r26
 262:	9f 91       	pop	r25
 264:	8f 91       	pop	r24
 266:	7f 91       	pop	r23
 268:	6f 91       	pop	r22
 26a:	5f 91       	pop	r21
 26c:	4f 91       	pop	r20
 26e:	3f 91       	pop	r19
 270:	2f 91       	pop	r18
 272:	0f 90       	pop	r0
 274:	0f be       	out	0x3f, r0	; 63
 276:	0f 90       	pop	r0
 278:	1f 90       	pop	r1
 27a:	18 95       	reti

0000027c <__vector_19>:
ISR(USART_UDRE_vect){//interrupcion para enviar datos a la terminal
 27c:	1f 92       	push	r1
 27e:	0f 92       	push	r0
 280:	0f b6       	in	r0, 0x3f	; 63
 282:	0f 92       	push	r0
 284:	11 24       	eor	r1, r1
 286:	2f 93       	push	r18
 288:	3f 93       	push	r19
 28a:	4f 93       	push	r20
 28c:	5f 93       	push	r21
 28e:	6f 93       	push	r22
 290:	7f 93       	push	r23
 292:	8f 93       	push	r24
 294:	9f 93       	push	r25
 296:	af 93       	push	r26
 298:	bf 93       	push	r27
 29a:	ef 93       	push	r30
 29c:	ff 93       	push	r31
	if (hayDato) // imprimo temperatura , humdad , fecha y hora
 29e:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <hayDato>
 2a2:	88 23       	and	r24, r24
 2a4:	c9 f0       	breq	.+50     	; 0x2d8 <__vector_19+0x5c>
	{
		static uint8_t i=0;
		SerialPort_Send_Data(buffer[i]);
 2a6:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <__data_end>
 2aa:	f0 e0       	ldi	r31, 0x00	; 0
 2ac:	ef 5f       	subi	r30, 0xFF	; 255
 2ae:	fe 4f       	sbci	r31, 0xFE	; 254
 2b0:	80 81       	ld	r24, Z
 2b2:	0e 94 48 02 	call	0x490	; 0x490 <SerialPort_Send_Data>
		i++;
 2b6:	e0 91 32 01 	lds	r30, 0x0132	; 0x800132 <__data_end>
 2ba:	ef 5f       	subi	r30, 0xFF	; 255
 2bc:	e0 93 32 01 	sts	0x0132, r30	; 0x800132 <__data_end>
		if (buffer[i]=='\0')
 2c0:	f0 e0       	ldi	r31, 0x00	; 0
 2c2:	ef 5f       	subi	r30, 0xFF	; 255
 2c4:	fe 4f       	sbci	r31, 0xFE	; 254
 2c6:	80 81       	ld	r24, Z
 2c8:	81 11       	cpse	r24, r1
 2ca:	06 c0       	rjmp	.+12     	; 0x2d8 <__vector_19+0x5c>
		{
			i=0;
 2cc:	10 92 32 01 	sts	0x0132, r1	; 0x800132 <__data_end>
			hayDato=0;
 2d0:	10 92 33 01 	sts	0x0133, r1	; 0x800133 <hayDato>
			SerialPort_TX_Interrupt_Disable();//Deshabilito interrupcion
 2d4:	0e 94 36 02 	call	0x46c	; 0x46c <SerialPort_TX_Interrupt_Disable>
		}
	}
	
}
 2d8:	ff 91       	pop	r31
 2da:	ef 91       	pop	r30
 2dc:	bf 91       	pop	r27
 2de:	af 91       	pop	r26
 2e0:	9f 91       	pop	r25
 2e2:	8f 91       	pop	r24
 2e4:	7f 91       	pop	r23
 2e6:	6f 91       	pop	r22
 2e8:	5f 91       	pop	r21
 2ea:	4f 91       	pop	r20
 2ec:	3f 91       	pop	r19
 2ee:	2f 91       	pop	r18
 2f0:	0f 90       	pop	r0
 2f2:	0f be       	out	0x3f, r0	; 63
 2f4:	0f 90       	pop	r0
 2f6:	1f 90       	pop	r1
 2f8:	18 95       	reti

000002fa <TWI_Init>:
#define DS3231_ADDRESS 0x68 //especificar la dirección I2C del módulo RTC DS3231
#define ALTA 0b11110000 // PARTE ALTA
#define BAJA 0b00001111 // PARTE BAJA

void TWI_Init(void) {
	TWSR = 0x00;  // Prescaler de TWI = 1
 2fa:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7f80b9>
	TWBR = 152;    // Configurar SCL a 100 kHz con F_CPU = 16 MHz
 2fe:	88 e9       	ldi	r24, 0x98	; 152
 300:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR = 0x04;  // Habilitar TWI (Two-Wire Interface)
 304:	84 e0       	ldi	r24, 0x04	; 4
 306:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 30a:	08 95       	ret

0000030c <TWI_Start>:
}

void TWI_Start(void) {
	TWCR = (1 << TWSTA) | (1 << TWEN) | (1 << TWINT);
 30c:	84 ea       	ldi	r24, 0xA4	; 164
 30e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while ((TWCR & (1 << TWINT)) == 0);
 312:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 316:	88 23       	and	r24, r24
 318:	e4 f7       	brge	.-8      	; 0x312 <TWI_Start+0x6>
}
 31a:	08 95       	ret

0000031c <TWI_Stop>:

void TWI_Stop(void) {
	TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWSTO) ;
 31c:	84 e9       	ldi	r24, 0x94	; 148
 31e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 322:	08 95       	ret

00000324 <TWI_Write>:
}

void TWI_Write(uint8_t data) {
	TWDR = data;
 324:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1 << TWEN) | (1 << TWINT);
 328:	84 e8       	ldi	r24, 0x84	; 132
 32a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while ((TWCR & (1 << TWINT)) == 0);
 32e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 332:	88 23       	and	r24, r24
 334:	e4 f7       	brge	.-8      	; 0x32e <TWI_Write+0xa>
}
 336:	08 95       	ret

00000338 <TWI_Read>:

unsigned char TWI_Read(unsigned char isLast) {
	if (isLast == 0) // send ACK
 338:	81 11       	cpse	r24, r1
 33a:	04 c0       	rjmp	.+8      	; 0x344 <TWI_Read+0xc>
	TWCR = (1 << TWEN) | (1 << TWINT) | (1 << TWEA); // send ACK
 33c:	84 ec       	ldi	r24, 0xC4	; 196
 33e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 342:	03 c0       	rjmp	.+6      	; 0x34a <TWI_Read+0x12>
	else
	TWCR = (1 << TWEN) | (1 << TWINT); // send NACK
 344:	84 e8       	ldi	r24, 0x84	; 132
 346:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while ((TWCR & (1 << TWINT)) == 0);
 34a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 34e:	88 23       	and	r24, r24
 350:	e4 f7       	brge	.-8      	; 0x34a <TWI_Read+0x12>
	return TWDR;
 352:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 356:	08 95       	ret

00000358 <bcd_to_dec>:


uint8_t bcd_to_dec(uint8_t val) {
	//val contiene dos dígitos decimales en formato BCD y lo convierte a un valor decimal.
	return ((val & ALTA) >> 4 ) * 10 + ( val & BAJA);
 358:	98 2f       	mov	r25, r24
 35a:	92 95       	swap	r25
 35c:	9f 70       	andi	r25, 0x0F	; 15
 35e:	99 0f       	add	r25, r25
 360:	29 2f       	mov	r18, r25
 362:	22 0f       	add	r18, r18
 364:	22 0f       	add	r18, r18
 366:	92 0f       	add	r25, r18
 368:	8f 70       	andi	r24, 0x0F	; 15
}
 36a:	89 0f       	add	r24, r25
 36c:	08 95       	ret

0000036e <bcd_anio_dec>:

uint16_t bcd_anio_dec(uint8_t bcd_year) {
	// Convertir año en formato BCD a decimal y ajustar a partir del año 2024
	return 24 + bcd_to_dec(bcd_year);
 36e:	0e 94 ac 01 	call	0x358	; 0x358 <bcd_to_dec>
 372:	90 e0       	ldi	r25, 0x00	; 0
}
 374:	48 96       	adiw	r24, 0x18	; 24
 376:	08 95       	ret

00000378 <config_errorFecha>:

uint8_t config_errorFecha(uint8_t val) {
	// Convierte un byte BCD de día/mes en su equivalente decimal, iniciando desde 1.
	uint8_t num = bcd_to_dec(val);
 378:	0e 94 ac 01 	call	0x358	; 0x358 <bcd_to_dec>
	if (num == 0) {
 37c:	81 11       	cpse	r24, r1
 37e:	01 c0       	rjmp	.+2      	; 0x382 <config_errorFecha+0xa>
		return 1; // Ajuste para iniciar desde 1 si el día/mes es 0 en BCD
 380:	81 e0       	ldi	r24, 0x01	; 1
	}
	return num;
}
 382:	08 95       	ret

00000384 <RTC_DS3231_Init>:

void RTC_DS3231_Init(void) {
	TWI_Init();
 384:	0e 94 7d 01 	call	0x2fa	; 0x2fa <TWI_Init>
 388:	08 95       	ret

0000038a <RTC_DS3231_Get>:
}

DateTime RTC_DS3231_Get(void) {
 38a:	cf 93       	push	r28
 38c:	df 93       	push	r29
 38e:	cd b7       	in	r28, 0x3d	; 61
 390:	de b7       	in	r29, 0x3e	; 62
 392:	2e 97       	sbiw	r28, 0x0e	; 14
 394:	0f b6       	in	r0, 0x3f	; 63
 396:	f8 94       	cli
 398:	de bf       	out	0x3e, r29	; 62
 39a:	0f be       	out	0x3f, r0	; 63
 39c:	cd bf       	out	0x3d, r28	; 61
	DateTime now;
	// Iniciar la comunicación I2C
	TWI_Start();
 39e:	0e 94 86 01 	call	0x30c	; 0x30c <TWI_Start>
	TWI_Write((DS3231_ADDRESS << 1) | TW_WRITE);  // Dirección + bit de escritura
 3a2:	80 ed       	ldi	r24, 0xD0	; 208
 3a4:	0e 94 92 01 	call	0x324	; 0x324 <TWI_Write>
	TWI_Write(0x00);  // Dirección del primer registro (segundos)
 3a8:	80 e0       	ldi	r24, 0x00	; 0
 3aa:	0e 94 92 01 	call	0x324	; 0x324 <TWI_Write>

	// Reiniciar la comunicación para leer
	TWI_Start();
 3ae:	0e 94 86 01 	call	0x30c	; 0x30c <TWI_Start>
	TWI_Write((DS3231_ADDRESS << 1) | TW_READ);  // Dirección + bit de lectura
 3b2:	81 ed       	ldi	r24, 0xD1	; 209
 3b4:	0e 94 92 01 	call	0x324	; 0x324 <TWI_Write>
	// Leer los datos de los registros consecutivos
	now.second = bcd_to_dec(TWI_Read(0));  // Leer segundos (sin ACK)
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	0e 94 9c 01 	call	0x338	; 0x338 <TWI_Read>
 3be:	0e 94 ac 01 	call	0x358	; 0x358 <bcd_to_dec>
 3c2:	88 87       	std	Y+8, r24	; 0x08
	now.minute = bcd_to_dec(TWI_Read(0));  // Leer minutos (sin ACK)
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	0e 94 9c 01 	call	0x338	; 0x338 <TWI_Read>
 3ca:	0e 94 ac 01 	call	0x358	; 0x358 <bcd_to_dec>
 3ce:	89 87       	std	Y+9, r24	; 0x09
	now.hour = bcd_to_dec(TWI_Read(0));    // Leer horas (sin ACK)
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	0e 94 9c 01 	call	0x338	; 0x338 <TWI_Read>
 3d6:	0e 94 ac 01 	call	0x358	; 0x358 <bcd_to_dec>
 3da:	8a 87       	std	Y+10, r24	; 0x0a
	TWI_Read(0);  // Leer día de la semana y descartar (sin ACK)
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	0e 94 9c 01 	call	0x338	; 0x338 <TWI_Read>
	now.day = config_errorFecha(TWI_Read(0));     // Leer día del mes (sin ACK)
 3e2:	80 e0       	ldi	r24, 0x00	; 0
 3e4:	0e 94 9c 01 	call	0x338	; 0x338 <TWI_Read>
 3e8:	0e 94 bc 01 	call	0x378	; 0x378 <config_errorFecha>
 3ec:	8b 87       	std	Y+11, r24	; 0x0b
	now.month = config_errorFecha(TWI_Read(0));   // Leer mes (sin ACK)
 3ee:	80 e0       	ldi	r24, 0x00	; 0
 3f0:	0e 94 9c 01 	call	0x338	; 0x338 <TWI_Read>
 3f4:	0e 94 bc 01 	call	0x378	; 0x378 <config_errorFecha>
 3f8:	8c 87       	std	Y+12, r24	; 0x0c
	now.year = bcd_anio_dec(TWI_Read(1));  // Leer año (con ACK)
 3fa:	81 e0       	ldi	r24, 0x01	; 1
 3fc:	0e 94 9c 01 	call	0x338	; 0x338 <TWI_Read>
 400:	0e 94 b7 01 	call	0x36e	; 0x36e <bcd_anio_dec>
 404:	9e 87       	std	Y+14, r25	; 0x0e
 406:	8d 87       	std	Y+13, r24	; 0x0d

	// Finalizar la comunicación I2C
	TWI_Stop();
 408:	0e 94 8e 01 	call	0x31c	; 0x31c <TWI_Stop>

	return now;
 40c:	87 e0       	ldi	r24, 0x07	; 7
 40e:	fe 01       	movw	r30, r28
 410:	38 96       	adiw	r30, 0x08	; 8
 412:	de 01       	movw	r26, r28
 414:	11 96       	adiw	r26, 0x01	; 1
 416:	01 90       	ld	r0, Z+
 418:	0d 92       	st	X+, r0
 41a:	8a 95       	dec	r24
 41c:	e1 f7       	brne	.-8      	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 41e:	29 81       	ldd	r18, Y+1	; 0x01
 420:	3a 81       	ldd	r19, Y+2	; 0x02
 422:	4b 81       	ldd	r20, Y+3	; 0x03
 424:	5c 81       	ldd	r21, Y+4	; 0x04
 426:	6d 81       	ldd	r22, Y+5	; 0x05
 428:	7e 81       	ldd	r23, Y+6	; 0x06
 42a:	8f 81       	ldd	r24, Y+7	; 0x07
 42c:	90 e0       	ldi	r25, 0x00	; 0
 42e:	2e 96       	adiw	r28, 0x0e	; 14
 430:	0f b6       	in	r0, 0x3f	; 63
 432:	f8 94       	cli
 434:	de bf       	out	0x3e, r29	; 62
 436:	0f be       	out	0x3f, r0	; 63
 438:	cd bf       	out	0x3d, r28	; 61
 43a:	df 91       	pop	r29
 43c:	cf 91       	pop	r28
 43e:	08 95       	ret

00000440 <SerialPort_Init>:

// Espera hasta que el buffer de RX este completo.
void SerialPort_Wait_Until_New_Data(void){
	// Pooling - Bloqueante, puede durar indefinidamente!
	while(!(UCSR0A & (1<<RXC0)));
}
 440:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7f80c1>
 444:	96 e0       	ldi	r25, 0x06	; 6
 446:	90 93 c2 00 	sts	0x00C2, r25	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7f80c2>
 44a:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7f80c5>
 44e:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7f80c4>
 452:	08 95       	ret

00000454 <SerialPort_TX_Enable>:
 454:	e1 ec       	ldi	r30, 0xC1	; 193
 456:	f0 e0       	ldi	r31, 0x00	; 0
 458:	80 81       	ld	r24, Z
 45a:	88 60       	ori	r24, 0x08	; 8
 45c:	80 83       	st	Z, r24
 45e:	08 95       	ret

00000460 <SerialPort_TX_Interrupt_Enable>:
 460:	e1 ec       	ldi	r30, 0xC1	; 193
 462:	f0 e0       	ldi	r31, 0x00	; 0
 464:	80 81       	ld	r24, Z
 466:	80 62       	ori	r24, 0x20	; 32
 468:	80 83       	st	Z, r24
 46a:	08 95       	ret

0000046c <SerialPort_TX_Interrupt_Disable>:
 46c:	e1 ec       	ldi	r30, 0xC1	; 193
 46e:	f0 e0       	ldi	r31, 0x00	; 0
 470:	80 81       	ld	r24, Z
 472:	8f 7d       	andi	r24, 0xDF	; 223
 474:	80 83       	st	Z, r24
 476:	08 95       	ret

00000478 <SerialPort_RX_Enable>:
 478:	e1 ec       	ldi	r30, 0xC1	; 193
 47a:	f0 e0       	ldi	r31, 0x00	; 0
 47c:	80 81       	ld	r24, Z
 47e:	80 61       	ori	r24, 0x10	; 16
 480:	80 83       	st	Z, r24
 482:	08 95       	ret

00000484 <SerialPort_RX_Interrupt_Enable>:
 484:	e1 ec       	ldi	r30, 0xC1	; 193
 486:	f0 e0       	ldi	r31, 0x00	; 0
 488:	80 81       	ld	r24, Z
 48a:	80 68       	ori	r24, 0x80	; 128
 48c:	80 83       	st	Z, r24
 48e:	08 95       	ret

00000490 <SerialPort_Send_Data>:
 490:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
 494:	08 95       	ret

00000496 <SerialPort_Recive_Data>:


char SerialPort_Recive_Data(void){
	return UDR0;
 496:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7f80c6>
}
 49a:	08 95       	ret

0000049c <ArmarBuffer>:
extern char buffer[];
extern uint8_t modo;
uint8_t temperaturaE=0,humedadE=0;


void ArmarBuffer(){
 49c:	cf 92       	push	r12
 49e:	df 92       	push	r13
 4a0:	ff 92       	push	r15
 4a2:	0f 93       	push	r16
 4a4:	1f 93       	push	r17
 4a6:	cf 93       	push	r28
 4a8:	df 93       	push	r29
 4aa:	cd b7       	in	r28, 0x3d	; 61
 4ac:	de b7       	in	r29, 0x3e	; 62
 4ae:	27 97       	sbiw	r28, 0x07	; 7
 4b0:	0f b6       	in	r0, 0x3f	; 63
 4b2:	f8 94       	cli
 4b4:	de bf       	out	0x3e, r29	; 62
 4b6:	0f be       	out	0x3f, r0	; 63
 4b8:	cd bf       	out	0x3d, r28	; 61
	DHT11_read(&humedadE,&temperaturaE);
 4ba:	65 e3       	ldi	r22, 0x35	; 53
 4bc:	71 e0       	ldi	r23, 0x01	; 1
 4be:	84 e3       	ldi	r24, 0x34	; 52
 4c0:	91 e0       	ldi	r25, 0x01	; 1
 4c2:	0e 94 a4 00 	call	0x148	; 0x148 <DHT11_read>
	
	//Almaceno datos en el buffer para luego imprimir por la terminal
	buffer[6]='0'+ (temperaturaE/10);
 4c6:	90 91 35 01 	lds	r25, 0x0135	; 0x800135 <temperaturaE>
 4ca:	01 e0       	ldi	r16, 0x01	; 1
 4cc:	11 e0       	ldi	r17, 0x01	; 1
 4ce:	0f 2e       	mov	r0, r31
 4d0:	fd ec       	ldi	r31, 0xCD	; 205
 4d2:	ff 2e       	mov	r15, r31
 4d4:	f0 2d       	mov	r31, r0
 4d6:	9f 9d       	mul	r25, r15
 4d8:	81 2d       	mov	r24, r1
 4da:	11 24       	eor	r1, r1
 4dc:	86 95       	lsr	r24
 4de:	86 95       	lsr	r24
 4e0:	86 95       	lsr	r24
 4e2:	20 e3       	ldi	r18, 0x30	; 48
 4e4:	28 0f       	add	r18, r24
 4e6:	d8 01       	movw	r26, r16
 4e8:	16 96       	adiw	r26, 0x06	; 6
 4ea:	2c 93       	st	X, r18
 4ec:	16 97       	sbiw	r26, 0x06	; 6
	buffer[7]='0'+ (temperaturaE%10);
 4ee:	88 0f       	add	r24, r24
 4f0:	28 2f       	mov	r18, r24
 4f2:	22 0f       	add	r18, r18
 4f4:	22 0f       	add	r18, r18
 4f6:	82 0f       	add	r24, r18
 4f8:	98 1b       	sub	r25, r24
 4fa:	90 5d       	subi	r25, 0xD0	; 208
 4fc:	17 96       	adiw	r26, 0x07	; 7
 4fe:	9c 93       	st	X, r25
 500:	17 97       	sbiw	r26, 0x07	; 7
	buffer[14]='0'+(humedadE/10);
 502:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <humedadE>
 506:	9f 9d       	mul	r25, r15
 508:	81 2d       	mov	r24, r1
 50a:	11 24       	eor	r1, r1
 50c:	86 95       	lsr	r24
 50e:	86 95       	lsr	r24
 510:	86 95       	lsr	r24
 512:	20 e3       	ldi	r18, 0x30	; 48
 514:	28 0f       	add	r18, r24
 516:	1e 96       	adiw	r26, 0x0e	; 14
 518:	2c 93       	st	X, r18
 51a:	1e 97       	sbiw	r26, 0x0e	; 14
	buffer[15]='0'+(humedadE%10);
 51c:	88 0f       	add	r24, r24
 51e:	28 2f       	mov	r18, r24
 520:	22 0f       	add	r18, r18
 522:	22 0f       	add	r18, r18
 524:	82 0f       	add	r24, r18
 526:	98 1b       	sub	r25, r24
 528:	90 5d       	subi	r25, 0xD0	; 208
 52a:	1f 96       	adiw	r26, 0x0f	; 15
 52c:	9c 93       	st	X, r25
	

	DateTime now;
	now = RTC_DS3231_Get(); // obtengo los datos de fecha y hora
 52e:	0e 94 c5 01 	call	0x38a	; 0x38a <RTC_DS3231_Get>
 532:	e2 2f       	mov	r30, r18
 534:	f3 2f       	mov	r31, r19
 536:	7e 83       	std	Y+6, r23	; 0x06
 538:	8f 83       	std	Y+7, r24	; 0x07
	//fecha
	buffer[24]='0'+now.day/10;
 53a:	5f 9d       	mul	r21, r15
 53c:	81 2d       	mov	r24, r1
 53e:	11 24       	eor	r1, r1
 540:	86 95       	lsr	r24
 542:	86 95       	lsr	r24
 544:	86 95       	lsr	r24
 546:	90 e3       	ldi	r25, 0x30	; 48
 548:	98 0f       	add	r25, r24
 54a:	d8 01       	movw	r26, r16
 54c:	58 96       	adiw	r26, 0x18	; 24
 54e:	9c 93       	st	X, r25
 550:	58 97       	sbiw	r26, 0x18	; 24
	buffer[25]='0'+now.day%10;
 552:	88 0f       	add	r24, r24
 554:	98 2f       	mov	r25, r24
 556:	99 0f       	add	r25, r25
 558:	99 0f       	add	r25, r25
 55a:	89 0f       	add	r24, r25
 55c:	58 1b       	sub	r21, r24
 55e:	50 5d       	subi	r21, 0xD0	; 208
 560:	59 96       	adiw	r26, 0x19	; 25
 562:	5c 93       	st	X, r21
 564:	59 97       	sbiw	r26, 0x19	; 25
	buffer[27]='0'+now.month/10;
 566:	6f 9d       	mul	r22, r15
 568:	81 2d       	mov	r24, r1
 56a:	11 24       	eor	r1, r1
 56c:	86 95       	lsr	r24
 56e:	86 95       	lsr	r24
 570:	86 95       	lsr	r24
 572:	90 e3       	ldi	r25, 0x30	; 48
 574:	98 0f       	add	r25, r24
 576:	5b 96       	adiw	r26, 0x1b	; 27
 578:	9c 93       	st	X, r25
 57a:	5b 97       	sbiw	r26, 0x1b	; 27
	buffer[28]='0'+now.month%10;
 57c:	88 0f       	add	r24, r24
 57e:	98 2f       	mov	r25, r24
 580:	99 0f       	add	r25, r25
 582:	99 0f       	add	r25, r25
 584:	89 0f       	add	r24, r25
 586:	68 1b       	sub	r22, r24
 588:	60 5d       	subi	r22, 0xD0	; 208
 58a:	5c 96       	adiw	r26, 0x1c	; 28
 58c:	6c 93       	st	X, r22
	buffer[30]='0'+now.year/10;
 58e:	ce 80       	ldd	r12, Y+6	; 0x06
 590:	df 80       	ldd	r13, Y+7	; 0x07
 592:	96 01       	movw	r18, r12
 594:	ad ec       	ldi	r26, 0xCD	; 205
 596:	bc ec       	ldi	r27, 0xCC	; 204
 598:	0e 94 4c 03 	call	0x698	; 0x698 <__umulhisi3>
 59c:	96 95       	lsr	r25
 59e:	87 95       	ror	r24
 5a0:	96 95       	lsr	r25
 5a2:	87 95       	ror	r24
 5a4:	96 95       	lsr	r25
 5a6:	87 95       	ror	r24
 5a8:	20 e3       	ldi	r18, 0x30	; 48
 5aa:	28 0f       	add	r18, r24
 5ac:	d8 01       	movw	r26, r16
 5ae:	5e 96       	adiw	r26, 0x1e	; 30
 5b0:	2c 93       	st	X, r18
 5b2:	5e 97       	sbiw	r26, 0x1e	; 30
	buffer[31]='0'+now.year%10;
 5b4:	9c 01       	movw	r18, r24
 5b6:	22 0f       	add	r18, r18
 5b8:	33 1f       	adc	r19, r19
 5ba:	88 0f       	add	r24, r24
 5bc:	99 1f       	adc	r25, r25
 5be:	88 0f       	add	r24, r24
 5c0:	99 1f       	adc	r25, r25
 5c2:	88 0f       	add	r24, r24
 5c4:	99 1f       	adc	r25, r25
 5c6:	82 0f       	add	r24, r18
 5c8:	93 1f       	adc	r25, r19
 5ca:	96 01       	movw	r18, r12
 5cc:	28 1b       	sub	r18, r24
 5ce:	39 0b       	sbc	r19, r25
 5d0:	c9 01       	movw	r24, r18
 5d2:	80 5d       	subi	r24, 0xD0	; 208
 5d4:	5f 96       	adiw	r26, 0x1f	; 31
 5d6:	8c 93       	st	X, r24
 5d8:	5f 97       	sbiw	r26, 0x1f	; 31
	//hora
	buffer[38]='0'+now.hour/10;
 5da:	4f 9d       	mul	r20, r15
 5dc:	81 2d       	mov	r24, r1
 5de:	11 24       	eor	r1, r1
 5e0:	86 95       	lsr	r24
 5e2:	86 95       	lsr	r24
 5e4:	86 95       	lsr	r24
 5e6:	90 e3       	ldi	r25, 0x30	; 48
 5e8:	98 0f       	add	r25, r24
 5ea:	96 96       	adiw	r26, 0x26	; 38
 5ec:	9c 93       	st	X, r25
 5ee:	96 97       	sbiw	r26, 0x26	; 38
	buffer[39]='0'+now.hour%10;
 5f0:	88 0f       	add	r24, r24
 5f2:	98 2f       	mov	r25, r24
 5f4:	99 0f       	add	r25, r25
 5f6:	99 0f       	add	r25, r25
 5f8:	89 0f       	add	r24, r25
 5fa:	48 1b       	sub	r20, r24
 5fc:	40 5d       	subi	r20, 0xD0	; 208
 5fe:	97 96       	adiw	r26, 0x27	; 39
 600:	4c 93       	st	X, r20
 602:	97 97       	sbiw	r26, 0x27	; 39
	buffer[41]='0'+now.minute/10;
 604:	ff 9d       	mul	r31, r15
 606:	81 2d       	mov	r24, r1
 608:	11 24       	eor	r1, r1
 60a:	86 95       	lsr	r24
 60c:	86 95       	lsr	r24
 60e:	86 95       	lsr	r24
 610:	90 e3       	ldi	r25, 0x30	; 48
 612:	98 0f       	add	r25, r24
 614:	99 96       	adiw	r26, 0x29	; 41
 616:	9c 93       	st	X, r25
 618:	99 97       	sbiw	r26, 0x29	; 41
	buffer[42]='0'+now.minute%10;
 61a:	88 0f       	add	r24, r24
 61c:	98 2f       	mov	r25, r24
 61e:	99 0f       	add	r25, r25
 620:	99 0f       	add	r25, r25
 622:	89 0f       	add	r24, r25
 624:	f8 1b       	sub	r31, r24
 626:	f0 5d       	subi	r31, 0xD0	; 208
 628:	9a 96       	adiw	r26, 0x2a	; 42
 62a:	fc 93       	st	X, r31
 62c:	9a 97       	sbiw	r26, 0x2a	; 42
	buffer[44]='0'+now.second/10;
 62e:	ef 9d       	mul	r30, r15
 630:	f1 2c       	mov	r15, r1
 632:	11 24       	eor	r1, r1
 634:	9f 2d       	mov	r25, r15
 636:	96 95       	lsr	r25
 638:	96 95       	lsr	r25
 63a:	96 95       	lsr	r25
 63c:	80 e3       	ldi	r24, 0x30	; 48
 63e:	89 0f       	add	r24, r25
 640:	9c 96       	adiw	r26, 0x2c	; 44
 642:	8c 93       	st	X, r24
 644:	9c 97       	sbiw	r26, 0x2c	; 44
	buffer[45]='0'+now.second%10;
 646:	f9 2e       	mov	r15, r25
 648:	ff 0c       	add	r15, r15
 64a:	8f 2d       	mov	r24, r15
 64c:	88 0f       	add	r24, r24
 64e:	88 0f       	add	r24, r24
 650:	f8 0e       	add	r15, r24
 652:	ef 19       	sub	r30, r15
 654:	e0 5d       	subi	r30, 0xD0	; 208
 656:	9d 96       	adiw	r26, 0x2d	; 45
 658:	ec 93       	st	X, r30
	
	
	
	
} 
 65a:	27 96       	adiw	r28, 0x07	; 7
 65c:	0f b6       	in	r0, 0x3f	; 63
 65e:	f8 94       	cli
 660:	de bf       	out	0x3e, r29	; 62
 662:	0f be       	out	0x3f, r0	; 63
 664:	cd bf       	out	0x3d, r28	; 61
 666:	df 91       	pop	r29
 668:	cf 91       	pop	r28
 66a:	1f 91       	pop	r17
 66c:	0f 91       	pop	r16
 66e:	ff 90       	pop	r15
 670:	df 90       	pop	r13
 672:	cf 90       	pop	r12
 674:	08 95       	ret

00000676 <__vector_14>:
	TCCR0A = (1<<COM0A0) | (1<<WGM01);// MODO CTC 
	TCCR0B=(1<<CS01) | (1<CS00); //CTC CLK/6
	TIMSK0 = (1<<OCIE0A);//Habilito interrupcion de compa
}

ISR(TIMER0_COMPA_vect){
 676:	1f 92       	push	r1
 678:	0f 92       	push	r0
 67a:	0f b6       	in	r0, 0x3f	; 63
 67c:	0f 92       	push	r0
 67e:	11 24       	eor	r1, r1
 680:	8f 93       	push	r24
	if(++contador ==2000){//llega a 2seg
 682:	80 91 36 01 	lds	r24, 0x0136	; 0x800136 <contador>
 686:	8f 5f       	subi	r24, 0xFF	; 255
 688:	80 93 36 01 	sts	0x0136, r24	; 0x800136 <contador>
		contador=0;
    }
 68c:	8f 91       	pop	r24
 68e:	0f 90       	pop	r0
 690:	0f be       	out	0x3f, r0	; 63
 692:	0f 90       	pop	r0
 694:	1f 90       	pop	r1
 696:	18 95       	reti

00000698 <__umulhisi3>:
 698:	a2 9f       	mul	r26, r18
 69a:	b0 01       	movw	r22, r0
 69c:	b3 9f       	mul	r27, r19
 69e:	c0 01       	movw	r24, r0
 6a0:	a3 9f       	mul	r26, r19
 6a2:	70 0d       	add	r23, r0
 6a4:	81 1d       	adc	r24, r1
 6a6:	11 24       	eor	r1, r1
 6a8:	91 1d       	adc	r25, r1
 6aa:	b2 9f       	mul	r27, r18
 6ac:	70 0d       	add	r23, r0
 6ae:	81 1d       	adc	r24, r1
 6b0:	11 24       	eor	r1, r1
 6b2:	91 1d       	adc	r25, r1
 6b4:	08 95       	ret

000006b6 <_exit>:
 6b6:	f8 94       	cli

000006b8 <__stop_program>:
 6b8:	ff cf       	rjmp	.-2      	; 0x6b8 <__stop_program>
